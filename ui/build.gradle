import java.util.regex.Pattern

apply plugin: 'com.android.library'
apply plugin: 'maven'

apply from: project.file("version.gradle")

ext.pomProjectName = 'Layer XDK'
ext.artifactIdName = 'xdk'
group 'com.layer.xdk'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionName = "${version}"
        vectorDrawables.useSupportLibrary = true

        consumerProguardFiles 'proguard-rules.pro'

        testInstrumentationRunner "com.layer.xdk.ui.TestButlerRunner"
    }

    buildTypes {
        debug {
            // Only enable multidex for debug builds as test libraries pushes it over the limit
            multiDexEnabled true
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        // Seems to be a conflict between Espresso 3.0.1 and Firebase 11.8.0
        pickFirst 'protobuf.meta'
    }

    // Data binding is still trying to use 25.2.0 for some reason
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-v4:27.1.0'
    }
}

repositories {
    maven { url "https://raw.githubusercontent.com/layerhq/releases-android/master/releases/" }
    jcenter()
    maven { url "https://maven.google.com" }
}

ext {
    org = "layerhq"
    repo = "Android-XDK"
    groupFolder = "com/layer/xdk"
}

dependencies {
    // Layer SDK
    api ('com.layer.sdk:layer-sdk:4.0.0') {
        exclude group: 'com.google.firebase', module: 'firebase-messaging'
        exclude group: 'com.google.firebase', module: 'firebase-core'
    }
    implementation 'org.slf4j:slf4j-nop:1.7.2'
    // Google Location
    implementation 'com.google.android.gms:play-services-location:11.8.0'
    // Image cache and loading
    implementation 'com.squareup.picasso:picasso:2.5.2'
    // Image popup
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.9.0'
    // Dependency injection
    implementation 'com.google.dagger:dagger-android:2.15'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.15'

    // Android UI
    // Keep as api for databinding
    api 'com.android.support:support-core-utils:27.1.0'
    implementation 'com.android.support:recyclerview-v7:27.1.0'
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:design:27.1.0'
    // Keep as api for views that expose this layout
    api 'com.android.support.constraint:constraint-layout:1.1.0-beta5'
    implementation "com.android.support:exifinterface:27.1.0"

    // Keep as api so MessageItemsListViewModel can be used
    api "android.arch.paging:runtime:1.0.0-alpha6"
    implementation "android.arch.lifecycle:livedata:1.1.0"
    // Include only for debug builds (namely for tests)
    debugImplementation 'com.android.support:multidex:1.0.3'

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.47'
    androidTestImplementation 'org.mockito:mockito-core:2.8.47'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.linkedin.testbutler:test-butler-library:1.3.1'
    androidTestImplementation 'com.google.dagger:dagger-android:2.15'
    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.15'

    // Espresso support
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "com.google.truth:truth:0.39"
    androidTestImplementation "com.google.truth:truth:0.39"
}

def sdkPom() {
    pom {
        project {
            name = pomProjectName
            packaging "aar"
            artifactId = artifactIdName

            developers {
                developer {
                    name 'Amar Srinivasan'
                    email 'amar@layer.com'
                }
                developer {
                    name 'Peter Elliott'
                    email 'peter@layer.com'
                }
            }
        }
    }
}

public String url() {
    return "file://$rootDir/releases"
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    title = "Layer XDK UI"

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task publishAar(type: Upload, description: "Upload android AAR library") {
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        mavenDeployer {
            repository(url: url())
            pom = sdkPom()
        }
    }
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

// Tasks for publishing a release to GitHub

def getReleaseNotes(version) {
    def capturing = false
    def sb = new StringBuilder();
    new File('./CHANGELOG.md').eachLine { line ->
        if (line ==~ /^\#\#\s${Pattern.quote(version)}$/) {
            capturing = true
        } else if (line ==~ /^\#\#\s[\d\.]+$/) {
            capturing = false
        } else if (capturing) {
            sb.append(line + "\n")
        }
    }

    // Trim and escape backticks
    return sb.toString()
            .trim()
            .replaceAll("`", "\\\\`")
}

def getGitHubToken() {
    return hasProperty('GITHUB_TOKEN') ? GITHUB_TOKEN : "";
}

def getUploadCommand(filename) {
    return "tools/github-release upload " +
            "--security-token ${getGitHubToken()} " +
            "--user $org " +
            "--repo $repo " +
            "--tag $version " +
            "--name $filename " +
            "--file releases/$groupFolder/$artifactIdName/$version/$filename"
}

afterEvaluate { project ->
    // Only add publishing tasks if preconditions are met so this can be used as a submodule
    if (!getGitHubToken().isEmpty() && new File('./CHANGELOG.md').exists()) {
        task uploadReleaseNotes(type: Exec) {
            workingDir "$rootDir"
            commandLine "bash", "-c", "tools/github-release release " +
                    "--security-token ${getGitHubToken()} " +
                    "--user $org " +
                    "--repo $repo " +
                    "--tag $version " +
                    "--description \"${getReleaseNotes("$version")}\""
        }

        task uploadReleaseAar(type: Exec, dependsOn: [uploadReleaseNotes, publishAar]) {
            workingDir "$rootDir"

            def filename = "$artifactIdName-${version}.aar"
            commandLine "bash", "-c", getUploadCommand(filename)
        }

        task uploadReleaseSources(type: Exec, dependsOn: [uploadReleaseNotes, publishAar]) {
            workingDir "$rootDir"

            def filename = "$artifactIdName-${version}-sources.jar"
            commandLine "bash", "-c", getUploadCommand(filename)
        }

        task uploadReleaseJavadoc(type: Exec, dependsOn: [uploadReleaseNotes, publishAar]) {
            workingDir "$rootDir"

            def filename = "$artifactIdName-${version}-javadoc.jar"
            commandLine "bash", "-c", getUploadCommand(filename)
        }

        task publishReleaseToGitHub(dependsOn: [uploadReleaseNotes, uploadReleaseAar, uploadReleaseSources, uploadReleaseJavadoc])
    }
}